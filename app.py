import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import joblib

st.set_page_config(layout="wide", page_title="Analyse des T√©l√©phones au Maroc")

# --- Configuration et Chargement des Donn√©es ---
st.sidebar.title("Navigation")
section = st.sidebar.radio("Aller √†", ["Aper√ßu des Donn√©es", "Exploration Visuelle", "Mod√©lisation Pr√©dictive"])

@st.cache_data # Mettre en cache les donn√©es pour de meilleures performances
def load_and_preprocess_data(file_path, handle_missing='drop'):
    try:
        df = pd.read_csv(file_path)
        
        # Convertir les noms de colonnes pour une meilleure manipulation (minuscules, underscores)
        df.columns = df.columns.str.strip().str.replace(' ', '_').str.replace('-', '_').str.replace('(', '').str.replace(')', '').str.lower()
        
        # Identifier les colonnes num√©riques et cat√©gorielles
        numeric_cols = df.select_dtypes(include=np.number).columns
        categorical_cols = df.select_dtypes(include='object').columns

        # Convertir les colonnes num√©riques en type appropri√©, en g√©rant les erreurs
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')

        # G√©rer les valeurs manquantes
        initial_rows = df.shape[0]
        if handle_missing == 'drop':
            df = df.dropna().reset_index(drop=True)
            st.sidebar.info(f"Suppression des lignes avec valeurs manquantes : {initial_rows - df.shape[0]} lignes supprim√©es.")
        elif handle_missing == 'fill_median':
            for col in numeric_cols:
                if df[col].isnull().any():
                    median_val = df[col].median()
                    df[col] = df[col].fillna(median_val)
            for col in categorical_cols:
                if df[col].isnull().any():
                    mode_val = df[col].mode()[0]
                    df[col] = df[col].fillna(mode_val)
            st.sidebar.info("Valeurs manquantes remplies (m√©diane pour num√©rique, mode pour cat√©gorielle).")
        
        return df
    except FileNotFoundError:
        st.error(f"Erreur : Le fichier '{file_path}' n'a pas √©t√© trouv√©. Assurez-vous qu'il est dans le m√™me r√©pertoire que l'application Streamlit.")
        st.stop()
    except Exception as e:
        st.error(f"Une erreur est survenue lors du chargement ou du pr√©traitement des donn√©es : {e}")
        st.stop()

# Options pour le traitement des donn√©es manquantes
missing_data_handle_option = st.sidebar.selectbox(
    "Comment g√©rer les donn√©es manquantes?",
    ("drop", "fill_median"),
    help="Choisir 'drop' pour supprimer les lignes avec des valeurs manquantes, ou 'fill_median' pour remplir avec la m√©diane (num√©rique) / mode (cat√©gorielle)."
)

df = load_and_preprocess_data("telephones_maroc.csv", missing_data_handle_option)

# --- Section : Aper√ßu des Donn√©es ---
if section == "Aper√ßu des Donn√©es":
    st.title("üìä Aper√ßu de la Base de Donn√©es 'Telephones Maroc'")
    st.write("Cette application interactive vous aide √† explorer et √† analyser votre dataset de t√©l√©phones au Maroc.")

    st.subheader("Structure et Contenu du Dataset")
    st.dataframe(df.head())

    st.subheader("Informations G√©n√©rales")
    col_info1, col_info2 = st.columns(2)
    with col_info1:
        st.write(f"**Nombre de lignes :** {df.shape[0]}")
        st.write(f"**Nombre de colonnes :** {df.shape[1]}")
        st.write("**Types de donn√©es :**")
        st.write(df.dtypes)
    with col_info2:
        st.write("**Colonnes disponibles :**")
        st.write(df.columns.tolist())
        st.write("**Statistiques descriptives :**")
        st.write(df.describe().T)

    st.subheader("Valeurs Manquantes")
    missing_data = df.isnull().sum()
    missing_data = missing_data[missing_data > 0]
    if not missing_data.empty:
        st.warning("Des valeurs manquantes ont √©t√© trouv√©es et trait√©es selon votre choix en barre lat√©rale.")
        st.dataframe(missing_data.sort_values(ascending=False))
    else:
        st.success("Aucune valeur manquante d√©tect√©e apr√®s le pr√©traitement.")

    st.subheader("Analyse de la Distribution des Valeurs Cat√©gorielles")
    categorical_cols = df.select_dtypes(include='object').columns.tolist()
    if categorical_cols:
     selected_cat_col = st.selectbox("Choisissez une colonne cat√©gorielle √† analyser :", categorical_cols)
    
    st.write(f"**Fr√©quence des valeurs pour '{selected_cat_col.replace('_', ' ').title()}' :**")
    # Cr√©e un DataFrame temporaire pour les comptages
    counts_df = df[selected_cat_col].value_counts().reset_index()
    # Renomme les colonnes du DataFrame temporaire de mani√®re explicite
    counts_df.columns = [selected_cat_col, 'Count'] # La premi√®re colonne sera le nom de la cat√©gorie, la seconde 'Count'
    
    st.dataframe(counts_df) # Affiche le DataFrame des comptages pour v√©rification

    fig_cat = px.bar(counts_df, # Utilise le DataFrame renomm√©
                     x=selected_cat_col, # L'axe des X est maintenant le nom de la colonne cat√©gorielle
                     y='Count',           # L'axe des Y est maintenant 'Count'
                     title=f"Distribution de {selected_cat_col.replace('_', ' ').title()}",
                     labels={selected_cat_col: selected_cat_col.replace('_', ' ').title(), 'Count': 'Nombre d\'occurrences'},
                     color_discrete_sequence=px.colors.qualitative.Pastel) # Ajoute une palette de couleurs pour un meilleur visuel
    st.plotly_chart(fig_cat, use_container_width=True)
else:
    st.info("Aucune colonne cat√©gorielle trouv√©e dans le dataset pour cette analyse.")
# ... (Previous code) ...

# This 'if' statement must precede the 'elif'
if section == "Aper√ßu des Donn√©es":
    st.title("üìä Aper√ßu de la Base de Donn√©es 'Telephones Maroc'")
    st.write("Cette application interactive vous aide √† explorer et √† analyser votre dataset de t√©l√©phones au Maroc.")
    # ... (rest of the "Aper√ßu des Donn√©es" section) ...



# **Exploration Visuelle**

# This 'elif' should be at the same indentation level as the 'if' above
elif section == "Exploration Visuelle":
    st.title("üìà Exploration Visuelle des Donn√©es de T√©l√©phones")
    # ... (rest of the "Exploration Visuelle" section) ...

    # --- Filtres Globaux pour les Visualisations ---
    st.sidebar.subheader("Filtres pour Visualisations")
    
    df_filtered = df.copy() # Initialiser df_filtered avec le DataFrame complet

    # Filtre par marque
    if 'marque' in df_filtered.columns:
        marques_uniques = ['Toutes'] + sorted(df_filtered['marque'].unique().tolist())
        selected_marque = st.sidebar.selectbox("Filtrer par Marque :", marques_uniques)
        if selected_marque != 'Toutes':
            df_filtered = df_filtered[df_filtered['marque'] == selected_marque]
    else:
        st.sidebar.info("La colonne 'marque' n'est pas disponible pour le filtrage.")

    # Filtre par ville de vente
    if 'ville_vente' in df_filtered.columns:
        villes_uniques = ['Toutes'] + sorted(df_filtered['ville_vente'].unique().tolist())
        selected_ville = st.sidebar.selectbox("Filtrer par Ville de Vente :", villes_uniques)
        if selected_ville != 'Toutes':
            df_filtered = df_filtered[df_filtered['ville_vente'] == selected_ville]
    else:
        st.sidebar.warning("La colonne 'ville_vente' n'existe pas pour le filtrage.")
    
    if df_filtered.empty:
        st.warning("Aucune donn√©e ne correspond √† vos crit√®res de filtre. Veuillez ajuster les filtres.")
        st.stop()


    st.subheader("1. Analyse par Ville et Marque")
    col1, col2 = st.columns(2)
    with col1:
        if 'ville_vente' in df_filtered.columns:
            st.write("#### Nombre de t√©l√©phones vendus par ville")
            vente_par_ville = df_filtered["ville_vente"].value_counts().reset_index()
            vente_par_ville.columns = ['Ville', 'Nombre de ventes']
            fig_ville_bar = px.bar(vente_par_ville, x='Ville', y='Nombre de ventes',
                                   title="T√©l√©phones vendus par ville (filtr√©)",
                                   labels={'Ville': 'Ville', 'Nombre de ventes': 'Nombre de ventes'})
            st.plotly_chart(fig_ville_bar, use_container_width=True)
        else:
            st.info("Colonne 'ville_vente' manquante pour cette visualisation.")

    with col2:
        if 'marque' in df_filtered.columns:
            st.write("#### R√©partition des Marques")
            fig_marque_pie = px.pie(df_filtered, names='marque',
                                    title='R√©partition des Marques (filtr√©e)')
            st.plotly_chart(fig_marque_pie, use_container_width=True)
        else:
            st.info("Colonne 'marque' manquante pour cette visualisation.")

    st.subheader("2. Distributions des Caract√©ristiques Cl√©s")
    col3, col4 = st.columns(2)
    with col3:
        if 'autonomie_batterie' in df_filtered.columns:
            st.write("#### Distribution de l'Autonomie de la Batterie")
            fig_autonomie_hist = px.histogram(df_filtered, x='autonomie_batterie',
                                              title='Distribution de l‚ÄôAutonomie de la Batterie',
                                              labels={'autonomie_batterie': 'Autonomie Batterie (mAh)'},
                                              nbins=20)
            st.plotly_chart(fig_autonomie_hist, use_container_width=True)
        else:
            st.info("Colonne 'autonomie_batterie' manquante.")

    with col4:
        if 'stockage_interne' in df_filtered.columns:
            st.write("#### Distribution du Stockage Interne")
            fig_stockage_hist = px.histogram(df_filtered, x='stockage_interne',
                                             title='Distribution du Stockage Interne',
                                             labels={'stockage_interne': 'Stockage Interne (Go)'},
                                             nbins=20)
            st.plotly_chart(fig_stockage_hist, use_container_width=True)
        else:
            st.info("Colonne 'stockage_interne' manquante.")

    st.subheader("3. Relations entre les Variables Num√©riques")
    numeric_cols = df_filtered.select_dtypes(include=np.number).columns.tolist()
    if 'prix' in numeric_cols:
        numeric_cols.remove('prix') # Souvent la variable cible, donc on l'enl√®ve des options X mais on la garde pour Y
    
    if len(numeric_cols) >= 1:
        col_scatter1, col_scatter2 = st.columns(2)
        with col_scatter1:
            st.write("#### Nuage de points personnalis√©")
            # Assurer que 'prix' est une option valide pour l'axe Y si elle existe
            y_axis_options = ['prix'] + [col for col in numeric_cols if col != 'prix'] if 'prix' in df_filtered.columns else numeric_cols
            if not y_axis_options:
                st.warning("Pas de colonnes num√©riques disponibles pour l'axe Y.")
            else:
                x_axis = st.selectbox("Axe X (Num√©rique) :", numeric_cols, key='scatter_x_axis')
                y_axis = st.selectbox("Axe Y (Num√©rique) :", y_axis_options, key='scatter_y_axis')
                color_by_options = ['Aucun'] + df_filtered.select_dtypes(include='object').columns.tolist()
                color_by = st.selectbox("Colorer par (Optionnel) :", color_by_options, key='scatter_color_by')

                if x_axis and y_axis:
                    fig_custom_scatter = px.scatter(df_filtered, x=x_axis, y=y_axis,
                                                    color=color_by if color_by != 'Aucun' else None,
                                                    title=f'{y_axis.replace("_", " ").title()} vs {x_axis.replace("_", " ").title()}',
                                                    labels={x_axis: x_axis.replace("_", " ").title(), y_axis: y_axis.replace("_", " ").title()})
                    st.plotly_chart(fig_custom_scatter, use_container_width=True)
                else:
                    st.info("Veuillez s√©lectionner au moins un axe X et Y pour le nuage de points.")
    else:
        st.info("Pas assez de colonnes num√©riques pour un nuage de points personnalis√©.")

    st.subheader("4. Carte de Chaleur des Corr√©lations")
    numeric_df = df_filtered.select_dtypes(include=np.number)
    if not numeric_df.empty and len(numeric_df.columns) > 1:
        fig_corr, ax_corr = plt.subplots(figsize=(10, 8))
        corr_matrix = numeric_df.corr()
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", ax=ax_corr)
        ax_corr.set_title("Matrice de Corr√©lation des Variables Num√©riques")
        st.pyplot(fig_corr)
    else:
        st.info("Pas assez de variables num√©riques pour calculer la matrice de corr√©lation ou le dataset filtr√© est vide.")



# **Mod√©lisation Pr√©dictive**

elif section == "Mod√©lisation Pr√©dictive": # Cette ligne doit suivre directement le 'if' ou 'elif' pr√©c√©dent
      st.title("ü§ñ Mod√©lisation du Prix des T√©l√©phones (R√©gression Lin√©aire)")
      st.write("Cette section permet de construire un mod√®le de r√©gression lin√©aire pour pr√©dire le prix des t√©l√©phones.")
    # Affichage du dataset pour le mod√®le (optionnel)
if st.checkbox("Afficher les donn√©es utilis√©es pour la mod√©lisation"):
        st.dataframe(df)

st.subheader("Configuration du Mod√®le")
    
    # S√©lection de la variable cible
target_variable = 'prix'
if target_variable not in df.columns:
        st.error(f"La colonne cible '{target_variable}' est introuvable. Veuillez v√©rifier votre dataset.")
        st.stop()
    
   # S√©lection des variables explicatives (features)
# Exclure la colonne cible et les colonnes non num√©riques/non pertinentes pour la r√©gression
available_features = df.select_dtypes(include=np.number).columns.tolist() # Correction ici
if target_variable in available_features:
    available_features.remove(target_variable)

    # Ajouter les colonnes binaires (si elles existent et n'ont pas √©t√© trait√©es comme num√©riques)
    # Exemple pour 'charge_rapide' si elle est 0 ou 1
    if 'charge_rapide' in df.columns and df['charge_rapide'].nunique() <= 2:
         if 'charge_rapide' not in available_features: # √âviter les doublons si d√©j√† num√©rique
             available_features.append('charge_rapide')


    selected_features = st.multiselect(
        "S√©lectionnez les variables explicatives (features) :",
        options=available_features,
        default=[col for col in ['stockage_interne', 'autonomie_batterie', 'nb_coeurs', 'charge_rapide'] if col in available_features] or available_features[:3] # D√©faut intelligent
    )

    if not selected_features:
        st.warning("Veuillez s√©lectionner au moins une variable explicative.")
        st.stop()

    X = df[selected_features]
    y = df[target_variable]

    # Traitement des donn√©es manquantes dans les colonnes s√©lectionn√©es (si non g√©r√© en amont)
    if X.isnull().sum().sum() > 0 or y.isnull().sum() > 0:
        st.warning("‚ö†Ô∏è Des donn√©es manquantes ont √©t√© d√©tect√©es dans les colonnes s√©lectionn√©es. Elles seront supprim√©es pour l'entra√Ænement du mod√®le.")
        # Nettoyer sp√©cifiquement X et y pour le mod√®le
        data_model = pd.concat([X, y], axis=1).dropna()
        X = data_model[selected_features]
        y = data_model[target_variable]
        if X.empty:
            st.error("Apr√®s suppression des NaN, le jeu de donn√©es pour la mod√©lisation est vide. Ajustez vos s√©lections ou nettoyez mieux les donn√©es.")
            st.stop()
        
    st.info(f"Le mod√®le sera entra√Æn√© avec **{len(selected_features)}** variables explicatives et **{X.shape[0]}** observations.")

    # S√©paration train/test
    test_size = st.slider("Taille du jeu de test (%)", 10, 50, 20, step=5) / 100
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)

    st.write(f"**Taille du jeu d'entra√Ænement :** {X_train.shape[0]} observations")
    st.write(f"**Taille du jeu de test :** {X_test.shape[0]} observations")

    # Mod√®le
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # √âvaluation
    mse = mean_squared_error(y_test, y_pred)
    rmse = mse ** 0.5
    r2 = r2_score(y_test, y_pred)

    st.subheader("üìà R√©sultats de la R√©gression Lin√©aire")
    st.write(f"**Erreur Quadratique Moyenne (MSE) :** `{mse:.2f}`")
    st.write(f"**Racine de l'Erreur Quadratique Moyenne (RMSE) :** `{rmse:.2f}`")
    st.write(f"**Coefficient de D√©termination (R¬≤) :** `{r2:.2f}`")
    st.write(f"**Ordonn√©e √† l'origine (Intercept) :** `{model.intercept_:.2f}`")
    
    st.write("---")
    st.write("**Coefficients des Variables :**")
    coeffs = pd.DataFrame({
        'Variable': selected_features,
        'Coefficient': model.coef_
    })
    st.dataframe(coeffs)
    st.info("Un **coefficient positif** indique que l'augmentation de la variable associ√©e tend √† augmenter le prix, et vice-versa pour un coefficient n√©gatif. La **magnitude** indique l'ampleur de cette influence.")

    # Visualisation du prix r√©el vs pr√©dit
    st.subheader("Comparaison : Prix R√©el vs Prix Pr√©dit")
    fig_pred, ax_pred = plt.subplots(figsize=(10, 6))
    sns.scatterplot(x=y_test, y=y_pred, ax=ax_pred, alpha=0.6)
    ax_pred.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', label='Ligne de pr√©diction parfaite')
    ax_pred.set_xlabel("Prix R√©el")
    ax_pred.set_ylabel("Prix Pr√©dit")
    ax_pred.set_title("Prix R√©el vs Prix Pr√©dit")
    ax_pred.legend()
    st.pyplot(fig_pred)

    # R√©sidus
    st.subheader("Analyse des R√©sidus")
    residuals = y_test - y_pred
    fig_res, ax_res = plt.subplots(figsize=(10, 6))
    sns.scatterplot(x=y_pred, y=residuals, ax=ax_res, alpha=0.6)
    ax_res.axhline(y=0, color='r', linestyle='--')
    ax_res.set_xlabel("Prix Pr√©dit")
    ax_res.set_ylabel("R√©sidus (Prix R√©el - Prix Pr√©dit)")
    ax_res.set_title("R√©sidus vs Prix Pr√©dits")
    st.pyplot(fig_res)
    st.info("Un nuage de points des r√©sidus dispers√© al√©atoirement autour de z√©ro indique que le mod√®le capture bien la relation lin√©aire. Toute tendance ou motif peut indiquer un probl√®me avec le mod√®le ou les variables.")

    # --- Section Pr√©diction Interactive ---
    st.subheader("Pr√©diction du Prix d‚Äôun T√©l√©phone Neuf")

    # Cr√©er un dictionnaire pour stocker les valeurs d'entr√©e
    input_data = {}
    
    for feature in selected_features:
        # Tenter d'obtenir les min/max du DataFrame pour des valeurs par d√©faut plus pertinentes
        min_val = df[feature].min()
        max_val = df[feature].max()

        if pd.api.types.is_integer_dtype(df[feature]) or feature in ['charge_rapide', 'nb_coeurs']:
            # Utiliser slider pour les entiers, avec des pas intelligents
            step = 1
            if 'stockage_interne' == feature: step = 32
            elif 'autonomie_batterie' == feature: step = 100
            elif 'nb_coeurs' == feature: step = 2

            input_data[feature] = st.slider(f"{feature.replace('_', ' ').title()}", 
                                            int(min_val) if not np.isnan(min_val) else 0, 
                                            int(max_val) if not np.isnan(max_val) else 100, 
                                            int(min_val + (max_val - min_val)/2) if not np.isnan(min_val) and not np.isnan(max_val) else 50, 
                                            step=step, key=f"pred_slider_{feature}")
        else:
            # Utiliser number_input pour les flottants
            input_data[feature] = st.number_input(f"{feature.replace('_', ' ').title()}", 
                                                float(min_val) if not np.isnan(min_val) else 0.0, 
                                                float(max_val) if not np.isnan(max_val) else 100.0, 
                                                float(min_val + (max_val - min_val)/2) if not np.isnan(min_val) and not np.isnan(max_val) else 50.0, 
                                                key=f"pred_input_{feature}")

    # Convertir les donn√©es d'entr√©e en DataFrame
    donnees_prediction = pd.DataFrame([input_data])
    
    # Assurer l'ordre des colonnes pour la pr√©diction
    donnees_prediction = donnees_prediction[selected_features]

    prix_pred = model.predict(donnees_prediction)[0]
    st.success(f"üí∞ Le prix estim√© de ce t√©l√©phone est : **{prix_pred:.2f} MAD**")

    # Sauvegarde du mod√®le
joblib.dump(model, "modele_prix_telephone.pkl")